# -*- eval: (save-excursion (org-babel-goto-named-src-block "workshopPreamble") (org-babel-execute-src-block)) -*-
#+TITLE:     Einführung in Python
#+AUTHOR:    Jörg Reuter
#+EMAIL:     joerg@reuter.sc
#+DATE:      

#+PROPERTY: exports both
#+EXCLUDE_TAGS: noexport mitsetup
#+SETUPFILE: ../workshopPreamble.org

#+name: workshopPreamble
#+begin_src emacs-lisp :exports none :results silent :tangle no
  (load-file "../setupEnvironment.el")
#+end_src

* Vorbemerkung
Ich habe einen Workspace auf Cloud 9 erstellt. Ich würde gerne schauen wie die Zusammenarbeit im Team funktioniert. 

Editor: [https://ide.c9.io/joergre/aufgaben]

Files: [https://preview.c9users.io/joergre/aufgaben]

Alle Aufgaben sind in Python3 zu programmieren.


* Aufgabe 1 
Mitte der 30er Jahren stellte man sich die Frage, welche Aufgaben ein Computer berechnen kann. Insbesondere die Frage, ob die Dauer der benötigten Rechenzeit vorher bereits abgeschätzt werden kann. Woran können Funktionen erkannt werden, die problematisch sind?
1926 erfand Herr Ackermann eine Funktion, die bis heute die grenzen der Berechnebarkeit von prinzipiell berechenbaren Fuktionen aufzeigt und Kritierien enthält, die zumindest andeuten, dass die Funktion problematisch ist. Außer für Test beim Compilerbau hat die Funktion keinen praktischen Nutzen und wird nur in der theoretischen Informatik verwendet.

Erklärung der Ackermann-Fuktion (englisch, bitte auch Beschreibung beachten. Es gibt dort noch eine Fortsetzung): [https://youtu.be/i7sm9dzFtEI]
Erklärung (deutsch, Beweisführung müsst Ihr nicht beachten): [https://youtu.be/VZz7m91XxoM]
Computersimulation der Ackermann-Fuktion: [http://www.gfredericks.com/sandbox/arith/ackermann]

Beispiel in Python:

#+name: A
#+begin_src python :export both 
# -*- coding: utf-8 -*-
def A(m, n, s="%s"):
    print(s % ("A(%d,%d)" % (m, n)))
    if m == 0:
        return n + 1
    if n == 0:
        return A(m - 1, 1, s)
    n2 = A(m, n - 1, s % ("A(%d,%%s)" % (m - 1)))
    return A(m - 1, n2, s)

print(A(2,2))
#+end_src 

#+RESULTS: A
#+begin_example
A(2,2)
A(1,A(2,1))
A(1,A(1,A(2,0)))
A(1,A(1,A(1,1)))
A(1,A(1,A(0,A(1,0))))
A(1,A(1,A(0,A(0,1))))
A(1,A(1,A(0,2)))
A(1,A(1,3))
A(1,A(0,A(1,2)))
A(1,A(0,A(0,A(1,1))))
A(1,A(0,A(0,A(0,A(1,0)))))
A(1,A(0,A(0,A(0,A(0,1)))))
A(1,A(0,A(0,A(0,2))))
A(1,A(0,A(0,3)))
A(1,A(0,4))
A(1,5)
A(0,A(1,4))
A(0,A(0,A(1,3)))
A(0,A(0,A(0,A(1,2))))
A(0,A(0,A(0,A(0,A(1,1)))))
A(0,A(0,A(0,A(0,A(0,A(1,0))))))
A(0,A(0,A(0,A(0,A(0,A(0,1))))))
A(0,A(0,A(0,A(0,A(0,2)))))
A(0,A(0,A(0,A(0,3))))
A(0,A(0,A(0,4)))
A(0,A(0,5))
A(0,6)
7
#+end_example

** Aufgabe
1.) Erstelle ein Programm dass alle Werte von (0/0) bis (4/6) berechnet (soweit möglich).


* Aufgabe 2 - Gruppe 2
Lade bitte das pdf von [http://www.wired.com/images_blogs/threatlevel/2010/12/ANONOPS_The_Press_Release.pdf] herunter.
Fürhre aus das PDF das folgende Skript aus:
#+name: WLAN
#+begin_src python :export both 
# -*- coding: utf-8 -*-
#!/usr/bin/python
# -*- coding: utf-8 -*-
#!/usr/bin/python
# -*- coding: utf-8 -*-
import pyPdf
import optparse
from pyPdf import PdfFileReader


def printMeta(fileName):
    pdfFile = PdfFileReader(file(fileName, 'rb'))
    docInfo = pdfFile.getDocumentInfo()
    print '[*] PDF MetaData For: ' + str(fileName)
    for metaItem in docInfo:
        print '[+] ' + metaItem + ':' + docInfo[metaItem]


def main():
    parser = optparse.OptionParser('usage %prog "+\
      "-F <PDF file name>')
    parser.add_option('-F', dest='fileName', type='string',\
      help='specify PDF file name')

    (options, args) = parser.parse_args()
    fileName = options.fileName
    if fileName == None:
        print parser.usage
        exit(0)
    else:
        printMeta(fileName)


if __name__ == '__main__':
    main()
#+end_src

Achtung: Bitte die Bibliothek PyPDF installieren
Aufagbe:
- Worum geht es in dem PDF? Erkundige Dich nach der Geschichte.
- Stelle die Funktionsweise de Programms dar.


* Aufgabe 3 - Shadow - FERTIG

Die Passwörter der Benutzer werden in der Datei /etc/shadow abgelegt. Zu beachten ist, dass die Passwörter als Hash abgelegt werden und daher es durchaus möglich ist mehrere Passwörter den gleichen Hash generieren.

Um den Vorgang zu verstehen, erzeugen wie einen User fbs:

#+name: create_user
#+begin_src bash :export both
sudo adduser fbs
#+end_src

Benutzer anlegen mit dem Namen "fbs" und Passwort "fbs". Für Python muss das Modul passlib installiert werden:

#+name: install_paasslib
#+begin_src bash :export both 
sudo apt-get install python3-passlib
#+end_src

Passwörter werden in der Datei /etc/shadow abgelegt. Die Zeile für den User fbs sieht dann wie folgt aus:

#+BEGIN_SRC bash 
fbs:$6$F3paVtSt$YhQiVqcS9uafpq9rqV4bCuntnJu6Zo/GEKKNTvzu25hnqmXgZqnHHgKU6napyoeL7WlAU3TMD9erwRyasjLPf/:16954:0:99999:7:::
#+END_SRC


fbs ist der Benutzername. $6$ ist der Algorithmus, dabei sind folgende Einträge möglich:

| $1$  | MD5      |
| $2a$ | Blowfish |
| $5$  | SHA-256  |
| $6$  | SHA-512  |

Der Salt kommt nach der Algorithmus-ID: F3paVtSt und wird für jedes  Passwort neu erstellt. Das Passwort hat abhängig vom Algorithmus eine feste Zeichenlänge:

| MD5    | 22 |
| SH-256 | 43 |
| SH-512 | 86 |

Das Programm berechnet den Hash des entsprechenden Algorithmus mit dem entsprechenden Hash:

#+name: passwd
#+begin_src python :export both 
# -*- coding: utf-8 -*-
# Vor Auführung: sudo apt-get install python3-passlib
from passlib.hash import sha512_crypt
import crypt
encPass = crypt.crypt("fbs","$6$F3paVtSt")
print(encPass)
#+end_src

#+RESULTS: passwd
#+begin_example
$6$F3paVtSt$YhQiVqcS9uafpq9rqV4bCuntnJu6Zo/GEKKNTvzu25hnqmXgZqnHHgKU6napyoeL7WlAU3TMD9erwRyasjLPf/
#+end_example

Der Salt wurde unter anderem eingeführt, dass nicht direkt die Hash-Werte verglichen werden können. Es gibt für MD5 z.B. grosse Tabellen in denen für alle möglichen Passworte die Hashwerte abgelegt wurden.

** Aufgabe:

Bitte ergänze obiges Programm in der Form, dass es eine gegebene shadow Datei (im Original) einliest und versucht mit Hilfe des (wirklich simplen) Wörterbuchs das Passwort zu erraten. Bei einem Treffer soll dann Benutzername und Passwort ausgegeben werden. Das Programm soll mindestens 2 Funktionen haben: main() und testPass(). Die Datei main() öffnet die Datei shadow und liest diese zeilenweise ein.  Die Funktion testPass() überprüft die Passwörter mit Hilfe der Wortdatei "German.dic". Das Programm ist ausführlich zu kommentieren.

Ergänzung für eine sehr gute Leistung
-------------------------------------
Ergänze das Programm zusätzlich um eine Bruceforce Methode. Die Methode soll die Konfiguration erlauben:
 
- Nur Große Buchstaben
- Nur kleine Buchstaben
- Große- und Kleine Buchstaben
- Kleine Buchstaben mit Zahlen
- Große Buchstaben mit Zahlen
- Buchstaben, Zahlen und Sonderzeichen

und die Möglichkeit der Passwortlänge sowohl Minimal wie maximal haben. 

Dann sollen die Passwörter der Reihe nach durchgetestet werden.

Hinweis:

#+name: passwd_cracker
#+BEGIN_SRC python :export both 
# -*- coding: utf-8 -*-
your_list = 'abcdefghijklmnopqrstuvwxyz'
complete_list = []
for current in range(2):
    a = [i for i in your_list]
    for y in range(current):
        a = [x+i for i in your_list for x in a]
    complete_list = complete_list+a
print(complete_list)
#+END_SRC

#+RESULTS: passwd_cracker
#+begin_example
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aa', 'ba', 'ca', 'da', 'ea', 'fa', 'ga', 'ha', 'ia', 'ja', 'ka', 'la', 'ma', 'na', 'oa', 'pa', 'qa', 'ra', 'sa', 'ta', 'ua', 'va', 'wa', 'xa', 'ya', 'za', 'ab', 'bb', 'cb', 'db', 'eb', 'fb', 'gb', 'hb', 'ib', 'jb', 'kb', 'lb', 'mb', 'nb', 'ob', 'pb', 'qb', 'rb', 'sb', 'tb', 'ub', 'vb', 'wb', 'xb', 'yb', 'zb', 'ac', 'bc', 'cc', 'dc', 'ec', 'fc', 'gc', 'hc', 'ic', 'jc', 'kc', 'lc', 'mc', 'nc', 'oc', 'pc', 'qc', 'rc', 'sc', 'tc', 'uc', 'vc', 'wc', 'xc', 'yc', 'zc', 'ad', 'bd', 'cd', 'dd', 'ed', 'fd', 'gd', 'hd', 'id', 'jd', 'kd', 'ld', 'md', 'nd', 'od', 'pd', 'qd', 'rd', 'sd', 'td', 'ud', 'vd', 'wd', 'xd', 'yd', 'zd', 'ae', 'be', 'ce', 'de', 'ee', 'fe', 'ge', 'he', 'ie', 'je', 'ke', 'le', 'me', 'ne', 'oe', 'pe', 'qe', 're', 'se', 'te', 'ue', 've', 'we', 'xe', 'ye', 'ze', 'af', 'bf', 'cf', 'df', 'ef', 'ff', 'gf', 'hf', 'if', 'jf', 'kf', 'lf', 'mf', 'nf', 'of', 'pf', 'qf', 'rf', 'sf', 'tf', 'uf', 'vf', 'wf', 'xf', 'yf', 'zf', 'ag', 'bg', 'cg', 'dg', 'eg', 'fg', 'gg', 'hg', 'ig', 'jg', 'kg', 'lg', 'mg', 'ng', 'og', 'pg', 'qg', 'rg', 'sg', 'tg', 'ug', 'vg', 'wg', 'xg', 'yg', 'zg', 'ah', 'bh', 'ch', 'dh', 'eh', 'fh', 'gh', 'hh', 'ih', 'jh', 'kh', 'lh', 'mh', 'nh', 'oh', 'ph', 'qh', 'rh', 'sh', 'th', 'uh', 'vh', 'wh', 'xh', 'yh', 'zh', 'ai', 'bi', 'ci', 'di', 'ei', 'fi', 'gi', 'hi', 'ii', 'ji', 'ki', 'li', 'mi', 'ni', 'oi', 'pi', 'qi', 'ri', 'si', 'ti', 'ui', 'vi', 'wi', 'xi', 'yi', 'zi', 'aj', 'bj', 'cj', 'dj', 'ej', 'fj', 'gj', 'hj', 'ij', 'jj', 'kj', 'lj', 'mj', 'nj', 'oj', 'pj', 'qj', 'rj', 'sj', 'tj', 'uj', 'vj', 'wj', 'xj', 'yj', 'zj', 'ak', 'bk', 'ck', 'dk', 'ek', 'fk', 'gk', 'hk', 'ik', 'jk', 'kk', 'lk', 'mk', 'nk', 'ok', 'pk', 'qk', 'rk', 'sk', 'tk', 'uk', 'vk', 'wk', 'xk', 'yk', 'zk', 'al', 'bl', 'cl', 'dl', 'el', 'fl', 'gl', 'hl', 'il', 'jl', 'kl', 'll', 'ml', 'nl', 'ol', 'pl', 'ql', 'rl', 'sl', 'tl', 'ul', 'vl', 'wl', 'xl', 'yl', 'zl', 'am', 'bm', 'cm', 'dm', 'em', 'fm', 'gm', 'hm', 'im', 'jm', 'km', 'lm', 'mm', 'nm', 'om', 'pm', 'qm', 'rm', 'sm', 'tm', 'um', 'vm', 'wm', 'xm', 'ym', 'zm', 'an', 'bn', 'cn', 'dn', 'en', 'fn', 'gn', 'hn', 'in', 'jn', 'kn', 'ln', 'mn', 'nn', 'on', 'pn', 'qn', 'rn', 'sn', 'tn', 'un', 'vn', 'wn', 'xn', 'yn', 'zn', 'ao', 'bo', 'co', 'do', 'eo', 'fo', 'go', 'ho', 'io', 'jo', 'ko', 'lo', 'mo', 'no', 'oo', 'po', 'qo', 'ro', 'so', 'to', 'uo', 'vo', 'wo', 'xo', 'yo', 'zo', 'ap', 'bp', 'cp', 'dp', 'ep', 'fp', 'gp', 'hp', 'ip', 'jp', 'kp', 'lp', 'mp', 'np', 'op', 'pp', 'qp', 'rp', 'sp', 'tp', 'up', 'vp', 'wp', 'xp', 'yp', 'zp', 'aq', 'bq', 'cq', 'dq', 'eq', 'fq', 'gq', 'hq', 'iq', 'jq', 'kq', 'lq', 'mq', 'nq', 'oq', 'pq', 'qq', 'rq', 'sq', 'tq', 'uq', 'vq', 'wq', 'xq', 'yq', 'zq', 'ar', 'br', 'cr', 'dr', 'er', 'fr', 'gr', 'hr', 'ir', 'jr', 'kr', 'lr', 'mr', 'nr', 'or', 'pr', 'qr', 'rr', 'sr', 'tr', 'ur', 'vr', 'wr', 'xr', 'yr', 'zr', 'as', 'bs', 'cs', 'ds', 'es', 'fs', 'gs', 'hs', 'is', 'js', 'ks', 'ls', 'ms', 'ns', 'os', 'ps', 'qs', 'rs', 'ss', 'ts', 'us', 'vs', 'ws', 'xs', 'ys', 'zs', 'at', 'bt', 'ct', 'dt', 'et', 'ft', 'gt', 'ht', 'it', 'jt', 'kt', 'lt', 'mt', 'nt', 'ot', 'pt', 'qt', 'rt', 'st', 'tt', 'ut', 'vt', 'wt', 'xt', 'yt', 'zt', 'au', 'bu', 'cu', 'du', 'eu', 'fu', 'gu', 'hu', 'iu', 'ju', 'ku', 'lu', 'mu', 'nu', 'ou', 'pu', 'qu', 'ru', 'su', 'tu', 'uu', 'vu', 'wu', 'xu', 'yu', 'zu', 'av', 'bv', 'cv', 'dv', 'ev', 'fv', 'gv', 'hv', 'iv', 'jv', 'kv', 'lv', 'mv', 'nv', 'ov', 'pv', 'qv', 'rv', 'sv', 'tv', 'uv', 'vv', 'wv', 'xv', 'yv', 'zv', 'aw', 'bw', 'cw', 'dw', 'ew', 'fw', 'gw', 'hw', 'iw', 'jw', 'kw', 'lw', 'mw', 'nw', 'ow', 'pw', 'qw', 'rw', 'sw', 'tw', 'uw', 'vw', 'ww', 'xw', 'yw', 'zw', 'ax', 'bx', 'cx', 'dx', 'ex', 'fx', 'gx', 'hx', 'ix', 'jx', 'kx', 'lx', 'mx', 'nx', 'ox', 'px', 'qx', 'rx', 'sx', 'tx', 'ux', 'vx', 'wx', 'xx', 'yx', 'zx', 'ay', 'by', 'cy', 'dy', 'ey', 'fy', 'gy', 'hy', 'iy', 'jy', 'ky', 'ly', 'my', 'ny', 'oy', 'py', 'qy', 'ry', 'sy', 'ty', 'uy', 'vy', 'wy', 'xy', 'yy', 'zy', 'az', 'bz', 'cz', 'dz', 'ez', 'fz', 'gz', 'hz', 'iz', 'jz', 'kz', 'lz', 'mz', 'nz', 'oz', 'pz', 'qz', 'rz', 'sz', 'tz', 'uz', 'vz', 'wz', 'xz', 'yz', 'zz']
#+end_example


* Aufgabe 4 - WLAN unter Windows
Das Programm untersucht alle auf einem Windows-PC abgespeicherten WLAN-Netzwerke und gibt die entsprechende Ort aus um ein Bewegungsprofil des Nutzers anzulegen.
** Aufgabe:
Bitte führe das Programm aus (auf einem Windows-Computer). Notiere Dir bitte die Version des Betriebssystems. Bei erfolgreicher Ausführung erkläre bitte seine Funktion. Im Fehlerfalle bitte eine E-Mail an mich.

#+name: WLAN
#+BEGIN_SRC python :export both 
# -*- coding: utf-8 -*-
#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import optparse
import mechanize
import urllib
import re
import urlparse
from _winreg import *


def val2addr(val):
    addr = ''
    for ch in val:
        addr += '%02x ' % ord(ch)
    addr = addr.strip(' ').replace(' ', ':')[0:17]
    return addr


def wiglePrint(username, password, netid):
    browser = mechanize.Browser()
    browser.open('http://wigle.net')
    reqData = urllib.urlencode({'credential_0': username,
                               'credential_1': password})
    browser.open('https://wigle.net/gps/gps/main/login', reqData)
    params = {}
    params['netid'] = netid
    reqParams = urllib.urlencode(params)
    respURL = 'http://wigle.net/gps/gps/main/confirmquery/'
    resp = browser.open(respURL, reqParams).read()
    mapLat = 'N/A'
    mapLon = 'N/A'
    rLat = re.findall(r'maplat=.*\&', resp)
    if rLat:
        mapLat = rLat[0].split('&')[0].split('=')[1]
    rLon = re.findall(r'maplon=.*\&', resp)
    if rLon:
        mapLon = rLon[0].split
    print '[-] Lat: ' + mapLat + ', Lon: ' + mapLon


def printNets(username, password):
    net = "SOFTWARE\Microsoft\Windows NT\CurrentVersion"+\
          "\NetworkList\Signatures\Unmanaged"
    key = OpenKey(HKEY_LOCAL_MACHINE, net)
    print '\n[*] Networks You have Joined.'
    for i in range(100):
        try:
            guid = EnumKey(key, i)
            netKey = OpenKey(key, str(guid))
            (n, addr, t) = EnumValue(netKey, 5)
            (n, name, t) = EnumValue(netKey, 4)
            macAddr = val2addr(addr)
            netName = str(name)
            print '[+] ' + netName + '  ' + macAddr
            wiglePrint(username, password, macAddr)
            CloseKey(netKey)
        except:
            break


def main():
    parser = optparse.OptionParser('usage %prog '+\
      '-u <wigle username> -p <wigle password>')
    parser.add_option('-u', dest='username', type='string',
                      help='specify wigle password')
    parser.add_option('-p', dest='password', type='string',
                      help='specify wigle username')
    (options, args) = parser.parse_args()
    username = options.username
    password = options.password
    if username == None or password == None:
        print parser.usage
        exit(0)
    else:
        printNets(username, password)


if __name__ == '__main__':
    main()
#+END_SRC 

* Aufgabe 5 - ZIP
Erstellen einer Zip-Datei unter Unix mit Passwort:
#+name: zip1
#+begin_src bash :export  both                                                                                                                                             
zip --encrypt evil.zip evil.txt
#+END_SRC

#+RESULTS: zip1

oder

#+name: zip2
#+BEGIN_SRC bash
zip --password (password) evil.zip files
#+END_SRC

Die Zip-Datei evil.zip wurde mit dem Passwort ASCII erstellt. In der Zip-Datei ist eine Datei mit dem Namen 'evil.py' enthalten.
Eine Zip-Datei entpacken:

#+name: zip_entpacken
#+BEGIN_SRC python
import zipfile
zFile = zipfile.ZipFile("evil.zip")
zFile.extractall(pwd="ASCII")
#+END_SRC

#+RESULTS: zip_entpacken

Entpacken mit flaschem Passwort und abfangen des Fehlers. Fehlermeldung wird ausgegeben.
#+name: zip_fehler 
#+BEGIN_SRC python
import zipfile
import sys
zFile = zipfile.ZipFile("evil.zip")
try:
    zFile.extractall(pwd="bloedsinn")
except:
        print(sys.exc_info()[0])
#+END_SRC

#+RESULTS:
#+begin_example
<type 'exceptions.RuntimeError'>
#+end_example

Entpacken mit Passwörtern aus einer Datei:

#+NAME zip_datei
#+BEGIN_SRC python

import zipfile
import sys
zFile = zipfile.ZipFile("evil.zip")

def entpackeDatei(zFile, passwort):
    try:
        zFile.extractall(pwd=passwort)
#        print("[-]"+passwort)
        return passwort
    except:
#        print(passwort+"\n")
        return

def main():
    passFile = open('German.dic')
    for line in passFile:
        passwort = line.rstrip()
#        print("Passwort: "+passwort)
        versuch = entpackeDatei(zFile, passwort)
        if versuch:
            print("[+] Passwort = "+passwort+"\n")
            exit(0)

main()

#+END_SRC

#+RESULTS:
#+begin_example
[+] Passwort = ASCII

#+end_example

